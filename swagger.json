{
  "swagger": "2.0",
  "info": {
    "title": "Flybondi API",
    "x-logo": {
      "url": "https://flybondi-api.herokuapp.com/assets/logo.png",
      "backgroundColor": "#FFFFFF",
      "altText": "Flybondy logo"
    },
    "version": "v1"
  },
  "host": "flybondi-api.herokuapp.com",
  "schemes": ["https"],
  "basePath": "/",
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "securityDefinitions": {
    "API Key Auth": {
      "type": "apiKey",
      "in": "header",
      "name": "X-API-KEY"
    },
    "Cookie Auth": {
      "type": "http",
      "scheme": "cookie"
    },
    "Bearer Auth": {
      "type": "http",
      "scheme": "bearer",
      "bearerFormat": ["JWT  |", "|  CSRF"]
    }
  },
  "security": [
    {
      "API Key Auth": []
    },
    {
      "Bearer Auth": []
    },
    {
      "Cookie Auth": []
    }
  ],
  "paths": {
    "/login": {
      "post": {
        "tags": ["auth"],
        "summary": "Login Cookie",
        "description": "Login using cookies",
        "security": [
          {
            "API Key Auth": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Login a user",
            "required": true,
            "schema": { "$ref": "#/definitions/LoginUser" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "csrf": { "type": "string" }
              }
            }
          },
          "401": {
            "description": "The password is incorrect/The email does not exist"
          },
          "400": { "description": "The api key code is incorrect" }
        }
      }
    },
    "/logout": {
      "post": {
        "tags": ["auth"],
        "summary": "Logout session Cookie",
        "description": "Logout user",
        "security": [
          {
            "API Key Auth": []
          }
        ],
        "responses": {
          "200": { "description": "Success - User disconnected" },
          "400": { "description": "The api key code is invalid" }
        }
      }
    },
    "/login-token": {
      "post": {
        "tags": ["auth"],
        "summary": "Login Token",
        "description": "Login using token",
        "security": [
          {
            "API Key Auth": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Login a user",
            "required": true,
            "schema": { "$ref": "#/definitions/LoginUser" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "token": { "type": "string" },
                "refreshToken": { "type": "string" }
              }
            }
          },
          "401": {
            "description": "The password is incorrect/The email does not exist"
          },
          "400": { "description": "Api error, does not exist secretJWT" }
        }
      }
    },
    "/refresh-token": {
      "post": {
        "tags": ["auth"],
        "summary": "Refresh Token",
        "description": "Get new access token",
        "security": [
          {
            "API Key Auth": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "required": ["token"],
              "type": "object",
              "properties": {
                "token": {
                  "title": "Refresh token",
                  "type": "string",
                  "minLength": 1
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "token": { "type": "string" }
              }
            }
          },
          "400": {
            "description": "Api error, does not exist secretRefreshJWT"
          },
          "401": { "description": "The refresh access token does not exist" },
          "403": { "description": "The refresh access token expired" }
        }
      }
    },
    "/logout-token": {
      "post": {
        "tags": ["auth"],
        "summary": "Logout session Token",
        "description": "Logout user",
        "security": [
          {
            "API Key Auth": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "required": ["token"],
              "type": "object",
              "properties": {
                "token": {
                  "title": "Refresh token",
                  "type": "string",
                  "minLength": 1
                }
              }
            }
          }
        ],
        "responses": {
          "200": { "description": "Success - User disconnected" },
          "400": { "description": "The api key code is invalid" },
          "404": {
            "description": "It is necessary to send the refresh token by body"
          }
        }
      }
    },
    "/users/allusers": {
      "get": {
        "tags": ["users"],
        "summary": "List of users",
        "description": "List of all users.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": ["count", "results"],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/UserRead"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/create-user": {
      "post": {
        "tags": ["users"],
        "summary": "Create user",
        "description": "Create a new user.",
        "operationId": "createUser",
        "consumes": ["application/json"],
        "produces": ["application/json", "application/xml"],
        "security": [
          {
            "API Key Auth": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": { "$ref": "#/definitions/User" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/UserRead"
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": ["users"],
        "summary": "Espesific user search",
        "description": "Data of a user.",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/UserRead"
            }
          }
        }
      }
    },
    "/trips": {
      "get": {
        "tags": ["trips"],
        "summary": "List of trips",
        "parameters": [
          {
            "in": "query",
            "name": "city_from",
            "description": "Origin city",
            "schema": {
              "type": "string",
              "example": "COR"
            }
          },
          {
            "in": "query",
            "name": "city_to",
            "description": "Destination city",
            "schema": {
              "type": "string",
              "example": "BRZ"
            }
          },
          {
            "in": "query",
            "name": "page",
            "description": "Number of the page",
            "schema": {
              "type": "string",
              "example": "1"
            }
          },
          {
            "in": "query",
            "name": "passengers",
            "description": "Number of the passengers",
            "schema": {
              "type": "string",
              "example": "2"
            }
          },
          {
            "in": "query",
            "name": "price_min",
            "description": "Price min of trips",
            "schema": {
              "type": "string",
              "example": "150"
            }
          },
          {
            "in": "query",
            "name": "price_max",
            "description": "Price max of trips",
            "schema": {
              "type": "string",
              "example": "650"
            }
          },
          {
            "in": "query",
            "name": "date_since",
            "description": "From this date",
            "schema": {
              "type": "string",
              "example": "2021-11-15"
            }
          },
          {
            "in": "query",
            "name": "sort_by",
            "description": "Sort by 'price || data'",
            "schema": {
              "type": "string",
              "example": "price"
            }
          },
          {
            "in": "query",
            "name": "sort_type",
            "description": "Sort type 'ASC || DESC'",
            "schema": {
              "type": "string",
              "example": "ASC"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": ["count", "results"],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Trip"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/trips/min-max-price": {
      "get": {
        "tags": ["trips"],
        "summary": "Price min and max in DB",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": ["min", "max"],
              "type": "object",
              "properties": {
                "min": {
                  "type": "integer",
                  "example": "150"
                },
                "max": {
                  "type": "integer",
                  "example": "650"
                }
              }
            }
          }
        }
      }
    },
    "/orders": {
      "post": {
        "tags": ["orders"],
        "summary": "Create a new order",
        "operationId": "createOrder",
        "consumes": ["application/json"],
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created order object",
            "required": true,
            "schema": { "$ref": "#/definitions/Order" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        }
      }
    },
    "/orders/all": {
      "get": {
        "tags": ["orders"],
        "summary": "Search orders",
        "operationId": "searchOrder",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": ["count", "results"],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Order"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/orders/:{id}": {
      "post": {
        "tags": ["orders"],
        "summary": "Search order by id",
        "operationId": "searchOrder",

        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id of order",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": { "type": "integer", "format": "int32" },
        "type": { "type": "string" },
        "message": { "type": "string" }
      }
    },
    "LoginUser": {
      "required": ["email", "password"],
      "type": "object",
      "properties": {
        "email": {
          "title": "Direcci\u00f3n de correo electr\u00f3nico",
          "type": "string",
          "format": "email",
          "minLength": 1
        },
        "password": { "type": "string", "minLength": 8 }
      }
    },
    "User": {
      "required": ["email", "name", "lastname", "password"],
      "type": "object",
      "properties": {
        "name": { "type": "string", "minLength": 1 },
        "lastname": { "type": "string", "minLength": 1 },
        "email": {
          "title": "Direcci\u00f3n de correo electr\u00f3nico",
          "type": "string",
          "format": "email",
          "minLength": 1
        },
        "password": { "type": "string", "minLength": 8 },
        "phone": { "type": "string", "maxLength": 25 },
        "country": { "type": "string" },
        "birthdate": { "type": "string", "format": "date" }
      },
      "xml": { "name": "User" }
    },
    "UserRead": {
      "required": ["email", "name", "lastname"],
      "type": "object",
      "properties": {
        "name": { "type": "string", "minLength": 1 },
        "lastname": { "type": "string", "minLength": 1 },
        "email": {
          "title": "Direcci\u00f3n de correo electr\u00f3nico",
          "type": "string",
          "format": "email"
        },
        "phone": { "type": "string", "maxLength": 25 },
        "country": { "type": "string" },
        "birthdate": { "type": "string", "format": "date" }
      },
      "xml": { "name": "User" }
    },
    "Trip": {
      "required": [
        "id",
        "price",
        "origin",
        "destination",
        "data",
        "availability"
      ],
      "type": "object",
      "properties": {
        "id": { "type": "number", "minLength": 1, "readOnly": true },
        "price": { "type": "number", "minLength": 1 },
        "origin": { "type": "string", "minLength": 1 },
        "destination": { "type": "string", "minLength": 1 },
        "data": { "type": "string", "minLength": 1 },
        "availability": { "type": "number", "minLength": 1, "readOnly": true }
      },
      "xml": { "name": "Trip" }
    },
    "Order": {
      "required": ["destination", "data_go", "origin", "passengers", "total"],
      "type": "object",
      "properties": {
        "id": { "type": "number", "minLength": 1, "readOnly": true },
        "total": { "type": "number", "minLength": 1, "example": 1540 },
        "origin": { "type": "string", "minLength": 1, "example": "COR" },
        "destination": { "type": "string", "minLength": 1, "example": "BRZ" },
        "data_go": {
          "type": "string",
          "minLength": 1,
          "example": "2021-11-15"
        },
        "goBack": { "type": "boolean", "example": "false" },
        "data_back": {
          "type": "string",
          "example": "2021-11-23"
        },
        "passengers": {
          "type": "number",
          "minLength": 1,
          "example": 1
        },
        "user": {
          "type": "object",
          "properties": {
            "id": {
              "type": "number"
            },
            "name": {
              "type": "string"
            },
            "lastname": {
              "type": "string"
            }
          },
          "readOnly": true
        }
      },
      "xml": { "name": "Trip" }
    },

    "ProductStock": {
      "required": ["size", "details"],
      "type": "object",
      "properties": {
        "size": {
          "type": "integer",
          "default": "85 | 90 | 95 | 100",
          "minLength": 1
        },
        "totalQuantity": {
          "type": "number",
          "readOnly": true
        },
        "colors": {
          "type": "array",
          "items": {
            "type": "string",
            "default": "black | red | beige | white"
          },
          "readOnly": true
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "required": ["color", "quantity"],
            "properties": {
              "color": {
                "type": "string",
                "minLength": 1,
                "default": "black | red | beige | white"
              },
              "quantity": { "type": "number" }
            }
          }
        },
        "created_at": {
          "title": "Created at",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "updated_at": {
          "title": "Updated at",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    }
  }
}
